name: Publish latest reviews feed

on:
  workflow_dispatch:     # allow manual run
  schedule:
    - cron: "0 * * * *"  # run hourly

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: pip install requests pandas python-dateutil

      - name: Fetch & build reviews feed
        env:
          SOURCE_URL: "https://script.googleusercontent.com/a/macros/monkeytaps.app/echo?user_content_key=AehSKLi-zVj-Ji7uR1aWvkLiLBJHx06tSez1EBGDJkVaNn9tKav1-e9hTFuJqSw6PFxw2d3GWJ8-QKnl_8Ck_ngRzTRA_ADEJGHELWcFKyx6qMTwdPrJFMI7Q5echDSBu9IUZdO3Gvs-gMTEiYD6GSyVRZK4yJWpP12Tdr86bpZGwRACDCuin4sLGXWldaOg0XjuE8V75ScLQD3JoPWnrp58N_T3bo4yrYp0yO-CfMYYMScy3WilHt9I-FMB8chvikKsYZOhoI620vCVoOjoD8ifTWL1GfjnAGBo34-zAjSgc_DyzKdpqmExTSy6vuxiag&lib=MmBiQwJUX6mx_qByjyAY6hnlB0nlkJcyY"
          DAYS: "90"
        run: |
          python - <<'EOF'
          import os, io, json, requests, pandas as pd
          from datetime import datetime, timedelta, timezone

          url = os.getenv("SOURCE_URL")
          days = int(os.getenv("DAYS","90"))

          r = requests.get(url, timeout=30)
          r.raise_for_status()

          # Try CSV or JSON
          if "csv" in url or "text/csv" in r.headers.get("content-type",""):
              df = pd.read_csv(io.StringIO(r.text))
          else:
              data = r.json()
              if isinstance(data, dict) and "reviews" in data:
                  df = pd.DataFrame(data["reviews"])
              else:
                  df = pd.DataFrame(data)

          # Normalize columns
          df.columns = [c.lower() for c in df.columns]
          if "date" in df.columns:
              df["date"] = pd.to_datetime(df["date"], errors="coerce", utc=True)
              cutoff = datetime.now(timezone.utc) - timedelta(days=days)
              df = df[df["date"] >= cutoff]

          # Build JSON
          records = df.to_dict(orient="records")
          payload = {
              "generated_at": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"),
              "window_days": days,
              "count": len(records),
              "reviews": records
          }

          import os
          os.makedirs("data", exist_ok=True)
          with open("data/latest.json","w",encoding="utf-8") as f:
              json.dump(payload,f,indent=2,ensure_ascii=False)
          df.to_csv("data/latest.csv",index=False)
          EOF

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest.json data/latest.csv
          git commit -m "Update reviews feed (last 90 days)" || echo "No changes"
          git push
